1. 엔티티에는 가급적으로 Setter를 사용하지 말자
    - 실무에서는 Getter는 열여두고, Setter는 꼭 필요한 경우에만 사용하는 것을 추천 (추적하기 어려움)

2. 실무에서는 @ManyToMany 사용하지말자(다:다 관계)
    - 연결해주는 중간 테이블에 컬럼을 추가해줄수가 없다.(유지보수 어려움)

3. 실무에서 모든 연관관계는 지연로딩(LAZY)으로 무조건 설정!
    - 즉시 로딩(EAGER) : 연관된 모든 테이블을 한번에 조회
    - 즉시 로딩은 예측이 어렵고, 추적하기가 힘들다.
    - 만약 연관된 엔티티를 함께 조회해야 한다면 Fetch Join, 엔티티 그래프를 사용
    - @XToOne(OneToOne, ManyToOne)관계는 fetch Defalut 값이 즉시 로딩(EAGER)이므로 직접 지연로딩으로 설정해줘야함.

4. 컬렉션은 필드에서 초기화하자.
    - Ex) Order.java --> private List<OrderItem> orderItems = new ArrayList<>(); (NULL 에러 최소화)
    - 하이버네이트가 엔티티를 영속화 할 떄, 컬렉션을 감싸서 하이버네이트가 제공되는 내장 컬렉션으로 변경
    - 컬렉션은 초기화 셋팅하고 그 이후로는 웬만해선 변경하지 말자(하이버네이트에서 에러발생 할 수 있음)

5. 테이블,컬럼명 생성 전략
    - 스프링부트 신규 설정(엔티티(필드) --> 테이블(컬럼))
        1. 카멜 케이스 -> 언더스코어(orderDate -> order_date
        2. .(점) -> _(언더스코어)
        3. 대문자 -> 소문자
        4. spring.jpa.hibernate.naming.implicit-strategy ,spring.jpa.hibernate.naming.physical-strategy 설정 가능


