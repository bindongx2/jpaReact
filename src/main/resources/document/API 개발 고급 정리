엔티티를 조회해서 그대로 반환 : V1
엔티티 조회 후 DTO로 변환 : V2
패치 조인으로 쿼리 수 최적화 : V3
    - 컬렉션은 패치 조인시 페이징 처리 불가
    - ToOne 관계는 패치 조인으로 쿼리 수 최적화
    - 컬렉션은 패치 조인 대신 지연 로딩을 유지하고, hibernate.default_batch_fetch_size, @BatchSize로 최적화

JPA에서 DTO를 직접 조회 : V4
컬렉션 조회 최적화 - 일대다 관계인 컬렉션은 IN절을 활용해서 메모리에 미리 조회해서 최적화 : V5
플렛 데이터 최적화 - JOIN 결과를 그대로 조회 후 애플리케이션에서 원하는 모양으로 직접 변환 : V6

<권장 순서>
1. 엔티티 조회 방식으로 우선 접근
    - 패치조인으로 쿼리 수를 최적화
    - 컬렉션 최적화
         - 페이징 필요(fetch_size 사용해서 최적화)
         - 페이징 필요X -> 패치조인 사용
    - 엔티티 조회방식으로 해결이 안되면 DTO조회 방식 사용
    - DTO조회 방식으로 해결이 안되면 NativeSQL or Spring JdbcTemplate 사용

참고 : 엔티티 조회 방식은 코드를 거의 수정하지 않고, 옵션만 변경하여 다양한 성능 최적화를 시도할 수 있다.
      반면에 DTO를 직접조회하는 방식은 성능을 최적화하거나 성능 최적화 방식을 변경할 때 많은 코드를 변경해야 한다.
      개발자는 성능 최적화와 코드 복잡도 사이에서 줄타기를 해야 한다.
      엔티티 조회 방식은 JPA가 많은 부분을 최적화 해준다.
      DTO 조회 방식은 SQL를 직접 다루는 것과 유사하다.
