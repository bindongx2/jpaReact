1. 도메인 모델 패턴 : 비즈니스 로직 대부분이 엔티티에 있는 패턴 Ex)JPA
   트랜잭션 스크립트 패턴 : 서비스 계층에서 대부분의 비즈니스 로직을 처리하는 패턴

2. 외부 API를 개발할때 반드시 리턴값을 엔티티로 반환하면 안된다.
    - API스펙이 변하면 엔티티도 변하게 된다.

3. 변경 감지와 병합(Merge)
    - 준영속 엔티티 : 영속성 컨텍스트가 더는 관리하지 않는 엔티티를 의미한다.
    - DB에 한번 저장되어서 기존 식별자가 존재하는 엔티티를 준영속 엔티티라 한다.

    준영속 엔티티를 수정하는 2가지 방법
        - 변경 감지 기능 사용
        - 병합(merge) 사용

    변경 감지 : 영속성 컨텍스트에 변경된 엔티티 값들을 감지하여 flush할때 변경해줌
    병합(merge) : 준영속 상태의 엔테티를 영속 상태로 변경할때 사용

    ※ 변경 감지 기능을 사용하면 원하는 속성만 변경이 가능하지만, 병합을 사용하면 모든 속성이 변경됨
      [주의 사항 : 병합시 값이 없으면 Null 값으로 변경 될 수 있다] ==> 실무에서는 병합을 사용하지말고 변경 감지 사용해야한다.

4. Controller에서 어설프게 엔티티 생성하지 말자.

5. 1:다 관계에서 패치조인을 할 경우 페이징 불가능!

6. 컬렉션 패치조인은 1개만 사용할 수 있다. 2개 이상 사용할 경우 데이터 뻥튀기 되므로 조심!

7. 패치 조인 및 페이징처리 한계 돌파
    - ToOne 관계는 패치 조인으로 쿼리수를 최적화하고 나머지는 hibernate.default_batch_fetch_size로 최적화!
    - default_fetch_size : 100~1000 사이를 선택하는 것을 권장!

8. 쿼리 조회 할경우
     - ToOne은 PetchJoin으로 한번에 가져오고(row수 증가X)
     - ToMany는 루프를 돌려서 채워 넣자.
